library(lattice)
a <- rnorm(100)
b <- rnorm(100)
xyplot(a,b)
?xyplot
xyplot (a ~ b)
class(xyplot a ~ b)
class(xyplot (a ~ b))
library(nlme)
xyplot (weight ~ time | diet, BodyWeight)
xyplot (weight ~ time | Diet, BodyWeight)
xyplot (weight ~ Time | Diet, BodyWeight)
?annotate
??annotate
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print p
p
data(airquality)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?geom
??geom
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
class(xyplot (a ~ b))
qplot(votes, rating, data = movies) + geom_smooth()
?lpoints
?points
?lines
?text
?lpoints
?poionts
?points
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
install.packages("dplyr")
install.packages("H:/Learning Work Area/R Learning/Coursera_JohnHopkins_DataScience/3. Getting & Cleaning Data/dplyr_0.4.1.zip", repos = NULL)
library("dplyr", lib.loc="~/R/R-3.0.2/library")
install.package("DBI")
install.packges("DBI")
install.packages("ggplot2")
detach("package:dplyr", unload=TRUE)
library("ggplot2", lib.loc="~/R/R-3.0.2/library")
install.packages("lattice")
library("lattice", lib.loc="~/R/R-3.0.2/library")
detach("package:lattice", unload=TRUE)
library(dplyr)
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("hadley/lazyeval")
devtools::install_github("hadley/dplyr")
install.packages("dplyr")
DataNEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
setwd("H:/Learning Work Area/R Learning/Coursera_JohnHopkins_DataScience/4. Exploratory Data Analysis/Week3/exdata-data-NEI_data")
DataNEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
summarise(DataNEI)
library(dplyr)
summarise(DataNEI)
dataNEI <- tbl_df(DataNEI)
summarise(DataNEI)
DataNEI
d <- table_df(DataNEI)
tbl_df(DataNEI)
d <- tbl_df(DataNEI)
d
summarise(d)
d %>% summarise(Emissions, year)
summarise(d, totalEmissions = sum(Emissions), na.rm = TRUE)
?summarise
summarise(d, totalEmissions = sum(Emissions) %>% group_by(year) )
summarise(select(group_by(totalEmissions = sum(Emissions), year)))
d %>%
group_by(year) %>%
summarise(
totEmissions = sum(Emissions)
) %>%
print
totEmissions <-
d %>%
group_by(year) %>%
summarise(
totEmissions = sum(Emissions)
)
totEmissions
rm(d, dataNEI,totEmissions)
NeiData <- tbl_df(NeiData)
NeiData <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
##      library dplyr used for summarising data
require(dplyr)
##      turn the data into a tbl_df for use with the dplry package
NeiData <- tbl_df(NeiData)
##      summarise data that is to be plotted
totEmissions <-
d %>%
group_by(year) %>%
summarise(
totEmissions = sum(Emissions))
##      using base package to plot
##      setting up parameters for the plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot1.png", width = 480, height = 480, units = "px")
plot(totEmissions, type = "l", xlab = "Year", main = "Total Emissions in the US - 1999 to 2008",
ylab = "Total PM2.5 Emission")
##      close the plot
dev.off()
d <- tbl_df(NeiData)
##      summarise data that is to be plotted
totEmissions <-
d %>%
group_by(year) %>%
summarise(
totEmissions = sum(Emissions))
##      using base package to plot
##      setting up parameters for the plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot1.png", width = 480, height = 480, units = "px")
plot(totEmissions, type = "l", xlab = "Year", main = "Total Emissions in the US - 1999 to 2008",
ylab = "Total PM2.5 Emission")
##      close the plot
dev.off()
setwd("H:/Learning Work Area/R Learning/Coursera_JohnHopkins_DataScience/4. Exploratory Data Analysis/Week3/exdata-data-NEI_data")
View(d)
d %>% filter(fips == "24510") %>% group_by(year) %>%
summarise(
totEmissions = sum(Emissions))
subset <- neiData[neiData$fips == "24510", ]
subset <- NeiData[NeiData$fips == "24510", ]
totalEmissions <- aggregate(subset$Emissions, list(subset$year), FUN = "sum")
totalEmissions
totEmissions <-
subset %>%
group_by(year) %>%
summarise(
totEmissions = sum(Emissions))
totEmissions
ar("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot1.png", width = 480, height = 480, units = "px")
plot(totEmissions, type = "l", xlab = "Year", main = "Total Emissions in Baltimore - 1999 to 2008",
ylab = "Total PM2.5 Emission")
##      close the plot
dev.off()
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot2.png", width = 480, height = 480, units = "px")
plot(totEmissions, type = "l", xlab = "Year", main = "Total Emissions in Baltimore - 1999 to 2008",
ylab = "Total PM2.5 Emission")
##      close the plot
dev.off()
d <- tbl_df(NeiData)
##      summarise data that is to be plotted
totEmissions <-
d %>%
group_by(year) %>%
summarise(
totEmissions = sum(Emissions))
##      using base package to plot
##      setting up parameters for the plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot1.png", width = 480, height = 480, units = "px")
plot(totEmissions, type = "l", xlab = "Year", main = "Total Emissions in the US - 1999 to 2008",
ylab = "Total PM2.5 Emission")
##      close the plot
dev.off()
rm(subset, totEmissions, totalEmissions)
subset <- d %>% filter(fips == "24510")
totEmissions <-
subset %>%
group_by(year) %>%
summarise(
totEmissions = sum(Emissions))
totalEmissions
totEmissions
totEmissions <-
subset %>%
group_by(year, type) %>%
summarise(
totEmissions = sum(Emissions))
totEmissions
g <- ggplot(subset, aes(year, totEmissions, color = type)
)
g
g + geom_line(stat = "summary" + ylab = "Total PM2.5 Emissions" + ggTitle("Total Emissions in Baltimore City 1999 - 2008"))
g + geom_line(stat = "summary" + ylab( "Total PM2.5 Emissions") + ggTitle("Total Emissions in Baltimore City 1999 - 2008"))
g + geom_line(ylab( "Total PM2.5 Emissions") + ggTitle("Total Emissions in Baltimore City 1999 - 2008"))
g + geom_line(ylab( "Total PM2.5 Emissions") + ggtitle("Total Emissions in Baltimore City 1999 - 2008"))
g + geom_line(ylab( "Total PM2.5 Emissions")) + ggtitle("Total Emissions in Baltimore City 1999 - 2008")
g <- ggplot(totEmissions, aes(year, totEmissions, color = type)
g + geom_line(ylab( "Total PM2.5 Emissions")) + ggtitle("Total Emissions in Baltimore City 1999 - 2008")
g <- ggplot(totEmissions, aes(year, totEmissions, color = type)
)
g + geom_line(ylab( "Total PM2.5 Emissions")) + ggtitle("Total Emissions in Baltimore City 1999 - 2008")
totEmissions
ggplot(totEmissions)
g
g <- ggplot(totEmissions, aes(year, totEmissions))
g
g + geom_line(ylab("Total 2.5pm Emissions"))
g <- ggplot(totEmissions, aes(year, tot, color = type))
g + geom_line(ylab( "Total PM2.5 Emissions")) + ggtitle("Total Emissions in Baltimore City 1999 - 2008")
ggplot(totEmissions)
g <- ggplot(totEmissions)
g
g <- ggplot(totEmissions, aes(x=year, y = tot, color = type))
g + geom_line()
totEmissions <-
subset %>%
group_by(year, type) %>%
summarise(
tot = sum(Emissions))
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot3.png", width = 480, height = 480, units = "px")
g <- ggplot(totEmissions, aes(year, tot, color = type))
g + geom_line()
g
totEmissions
g <- ggplot(totEmissions, aes(year, tot, color = type))
g + geom_line()
g <- g+geom_line()
g
rm(totEmissions)
rm(g)
totEmissions <-
subset %>%
group_by(year, type) %>%
summarise(
tot = sum(Emissions))
g <- ggplot(totEmissions, aes(year, tot, color = type))
g
g <- g+geom_line()
g
g
library(ggplot)
library(ggplot2)
g <- ggplot(totEmissions, aes(year, tot, color = type))
g <- g+geom_line()
g
g
g <- ggplot(totEmissions, aes(year, tot, color = type), stat = "identity")
g <- g+geom_line()
g
ggplot(totEmissions, aes(year, tot, color = "type"), stat = "identity")
g <- ggplot(totEmissions, aes(year, tot, color = "type"), stat = "identity")
g + geom_line()
g
g <- g+geom_line()
g
rm(g)
g <- ggplot(totEmissions, aes(year, tot, color = "type")) + geom_line(stat = "identity")
g
g
rm(g)
totEmissions
p <- ggplot(totEmissions, aes(x = "year", y = "tot", color = "type")
)
p + geom_line(stat = "identity")
p
p <- p + geom_line(stat = "identity")
p
rm(p)
ggplot(totEmissions, aes(year, tot, color = type)) + geom_line()
g <- ggplot(totEmissions, aes(year, tot, color = type)) + geom_line()
g
?ggplot
rm(g)
g <- ggplot(totEmissions)
g
g <- g + aes(year)
g
g <- g + aes(tot)
g
g <- g + aes(color = type)
g
g <- g + geom_line()
g
rm(g)
ggplot(totEmissions, aes(year, tot, color = type)) + geom_line()
ggplot
ggplot()
g <- ggplot(totEmissions, aes(year, tot, color = type))
dev.off()
g <- ggplot(totEmissions, aes(year, tot, color = type))
g + geom_line()
g + geom_line(ylab( "Total PM2.5 Emissions")) + ggtitle("Total Emissions in Baltimore City 1999 - 2008")
g <- ggplot(totEmissions, aes(year, tot, color = type))
g + geom_line(stat = "identity")
g + geom_line(ylab( "Total PM2.5 Emissions")) + ggtitle("Total Emissions in Baltimore City 1999 - 2008")
rm(g, subset, d, totEmissions)
##      turn the data into a tbl_df for use with the dplry package
d <- tbl_df(NeiData)
##      select the data that is relevant to this question & summarise
subset <- d %>% filter(fips == "24510")
##      summarise data that is to be plotted
totEmissions <-
subset %>%
group_by(year, type) %>%
summarise(
tot = sum(Emissions))
##      using ggplot2 package to plot
##      setting up parameters for the plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot3.png", width = 480, height = 480, units = "px")
g <- ggplot(totEmissions, aes(year, tot, color = type))
g + geom_line(stat = "identity")
g + geom_line(ylab( "Total PM2.5 Emissions")) + ggtitle("Total Emissions in Baltimore City 1999 - 2008")
##      close the plot
dev.off()
g <- ggplot(totEmissions, aes(x = year, y = tot, color = type))
g + geom_line(stat = "identity")
g + geom_line(ylab( "Total PM2.5 Emissions")) + ggtitle("Total Emissions in Baltimore City 1999 - 2008")
d
s <- tbl_df(SCC)
s
s %>% filter(grep("coal", Short.Name)) print
grep("coal", s$Short.Name)
grep("coal", s$Short.Name, ignore.case = T)
s %>% filter(grep("coal", Short.Name, ignore.case = T))
filter(s, Short.Name = grep("coal", ignore.case = T))
filter(s, Short.Name = grep("coal",x = Short.Name, ignore.case = T))
grep("coal",x = Short.Name, ignore.case = T)
grep("coal",x = s$Short.Name, ignore.case = T)
grepl("coal", s$Short.Name, ignore.case = T)
filter(s, Short.Name = grepl("coal",x = Short.Name, ignore.case = T))
coal <- s %>%
filter(grepl("coal", Short.Name, ignore.case = T)) %>%
select(Short.Name) %>%
print
coal
coal <- s %>%
filter(grepl("coal", Short.Name, ignore.case = T)) %>%
select(Short.Name)
coal
totEmissions <-
d %>%
filter(Short.name == coal) %>%
group_by(year) %>%
summarise(
tot = sum(Emissions))
d
s
coal <- s %>%
filter(grepl("coal", Short.Name, ignore.case = T)) %>%
select(SCC)
coal <- s %>%
filter(grepl("coal", Short.Name, ignore.case = T)) %>%
select(SCC)
coal
totEmissions <-
d %>%
filter(SCC == coal) %>%
group_by(year) %>%
summarise(
tot = sum(Emissions))
totEmissions <-
d %>%
filter(SCC %in% coal) %>%
group_by(year) %>%
summarise(
tot = sum(Emissions))
d %>%
filter(SCC %in% coal) %>%
group_by(year) %>%
summarise(
tot = sum(Emissions))
d %>%
group_by(year) %>%
select(year, Emissions, SCC) %>%
filter(SCC %in% coal) %>%
summarise(
tot = sum(Emissions))
coal
totEmissions <-
d %>%
group_by(year) %>%
select(year, Emissions, SCC) %>%
filter(SCC  == coal) %>%
summarise(
tot = sum(Emissions))
totEmissions <-
d %>%
select(year, Emissions, SCC) %>%
filter(SCC  == coal) %>%
group_by(year) %>%
summarise(
tot = sum(Emissions))
coal <- s %>%
select (SCC) %>%
filter(grepl("coal", Short.Name, ignore.case = T))
coal <- s %>%
filter(grepl("coal", Short.Name, ignore.case = T))%>%
select (SCC)
coal
d %>% filter(SCC == coal)
d %>% filter(SCC %in% coal)
d %>%
select(year, Emissions, SCC) %>%
filter(SCC  == coal)
?merge
?mutate
d%>%merge(d, s, by.x = d$SCC, by.y = s$SCC)
merge(d,s, by.x = s$SCC)
coal <- grep("coal", SCC$Short.Name, ignore.case = T)
coal <- SCC[coal, ]
coal <- NeiData[NeiData$SCC %in% coal$SCC, ]
coal <- grep("coal", SCC$Short.Name, ignore.case = T)
coal <- SCC[coal, ]
coal <- NeiData[NeiData$SCC %in% coal$SCC, ]
##      a different approach - using aggregate
coalEmissions <- aggregate(coal$Emissions, list(coal$year), FUN = "sum")
##      setting up parameters for the plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot4.png", width = 480, height = 480, units = "px")
## creating a plot using base package
plot(coalEmissions, type = "l", xlab = "year", main = "Total Emissions Coal Combustion Sources 1999 to 2008",
ylab = "Total PM2.5 Emission")
##      close the plot
dev.off()
d
vehicles <- grep("motor", SCC$Short.Name, ignore.case = T)
vehicles <- SCC[vehicles, ]
vehicles <- NeiData[NeiData$SCC %in% vehicles$SCC, ]
##      a different approach - using aggregate
vehicleEmissions <- aggregate(vehicles$Emissions, list(vehicles$year), FUN = "sum")
##      setting up parameters for the plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot4.png", width = 480, height = 480, units = "px")
## creating a plot using base package
plot(vehicleEmissions, type = "l", xlab = "year", main = "Total Emissions Coal Combustion Sources 1999 to 2008",
ylab = "Total PM2.5 Emission")
##      close the plot
dev.off()
coal <- grep("coal", SCC$Short.Name, ignore.case = T)
coal <- SCC[coal, ]
coal <- NeiData[NeiData$SCC %in% coal$SCC, ]
##      a different approach - using aggregate
coalEmissions <- aggregate(coal$Emissions, list(coal$year), FUN = "sum")
##      setting up parameters for the plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot4.png", width = 480, height = 480, units = "px")
## creating a plot using base package
plot(coalEmissions, type = "l", xlab = "year", main = "Total Emissions Coal Combustion Sources 1999 to 2008",
ylab = "Total PM2.5 Emission")
##      close the plot
dev.off()
vehicles <- grep("motor", SCC$Short.Name, ignore.case = T)
vehicles <- SCC[vehicles, ]
vehicles <- NeiData[NeiData$SCC %in% vehicles$SCC, ]
##      a different approach - using aggregate
vehicleEmissions <- aggregate(vehicles$Emissions, list(vehicles$year), FUN = "sum")
##      setting up parameters for the plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot5.png", width = 480, height = 480, units = "px")
## creating a plot using base package
plot(vehicleEmissions, type = "l", xlab = "year", main = "Total Emissions Coal Combustion Sources 1999 to 2008",
ylab = "Total PM2.5 Emission")
##      close the plot
dev.off()
vehicles <- grep("motor", SCC$Short.Name, ignore.case = T)
vehicles <- SCC[vehicles, ]
vehicles <- NeiData[NeiData$SCC %in% vehicles$SCC, ]
##      a different approach - using aggregate
vehicleEmissions <- aggregate(vehicles$Emissions, list(vehicles$year), FUN = "sum")
##      setting up parameters for the plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot5.png", width = 480, height = 480, units = "px")
## creating a plot using base package
plot(vehicleEmissions, type = "l", xlab = "year", main = "Baltimore Emissions Vehicle Combustion Sources 1999 to 2008",
ylab = "Total PM2.5 Emission")
##      close the plot
dev.off()
baltimore <- NeiData[NeiData$fips == "24510",]
vehicles <- grep("motor", SCC$Short.Name, ignore.case = T)
vehicles <- SCC[vehicles, ]
vehicles <- baltimore[baltimore$SCC %in% vehicles$SCC, ]
##      a different approach - using aggregate
vehicleEmissions <- aggregate(vehicles$Emissions, list(vehicles$year), FUN = "sum")
##      setting up parameters for the plot
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "plot5.png", width = 480, height = 480, units = "px")
## creating a plot using base package
plot(vehicleEmissions, type = "l", xlab = "year", main = "Baltimore Emissions Vehicle Combustion Sources 1999 to 2008",
ylab = "Total PM2.5 Emission")
##      close the plot
dev.off()
